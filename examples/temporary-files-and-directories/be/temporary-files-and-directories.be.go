// Падчас выканання праграмы нам часта хочацца стварыць
// дадзеныя, якія не патрэбныя пасля выканання праграмы.
// Для гэтага выкарыстоўваюцца *Тымчасовыя файлы і каталогі*.
// Яны не забруджваюць файлавую сістэму з цягам часу.

package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func main() {

	// Найпрасцейшы спосаб стварыць тымчасовы файл — гэта
	// выклікаць функцыю `os.CreateTemp`, якая стварае файл *і*
	// адкрывае яго для чытання і запісу. Мы перадаем `""`
	// у якасці першага аргумента, таму `os.CreateTemp`
	// створыць файл у стандартным каталогу для нашай аперацыйнай сістэмы.
	f, err := os.CreateTemp("", "sample")
	check(err)

	// Паказаць назву тымчасовага файла.
	// У аперацыйных сістэмах на базе Unix каталог, будзе `/tmp`.
	// Назва файла пачынаецца з прэфікса, зададзенага ў якасці
	// другога аргумента функцыі `os.CreateTemp`,
	// рэшта імені генеруецца, каб гарантаваць розныя імёны файлаў.
	fmt.Println("Temp file name:", f.Name())

	// Ачысціць файл пасля завяршэння. Аперацыйная сістэма, сама прыбірае часовыя
	// файлы праз некаторы час, але добрай практыкай будзе рабіць гэта
	// відавочна.
	defer os.Remove(f.Name())

	// Мы можам запісаць некаторыя дадзеныя ў файл.
	_, err = f.Write([]byte{1, 2, 3, 4})
	check(err)

	// Калі мы маем намер стварыць шмат часовых файлаў, мы можам
	// аддаць перавагу стварэнню часовага *каталога*.
	// Аргументы функцыі `os.MkdirTemp` такія ж, як і
	// `CreateTemp`, але яна вяртае *імя* каталога
	// замест імені файла.
	dname, err := os.MkdirTemp("", "sampledir")
	check(err)
	fmt.Println("Temp dir name:", dname)

	defer os.RemoveAll(dname)

	// Цяпер мы можам сінтэзаваць імёны часовых файлаў,
	// дадаўшы перад імі наш часовы каталог.
	fname := filepath.Join(dname, "file1")
	err = os.WriteFile(fname, []byte{1, 2}, 0666)
	check(err)
}
