// У Go, _масіў_ — гэта нумараваная паслядоўнасць элементаў
// пэўнай даўжыні. У тыповым кодзе Go, [slices](slices) —
// выкарыстоўваюцца значна часцей; масівы карысныя ў некаторых
// спецыяльных выпадках.
package main

import "fmt"

func main() {

	// Тут ствараецца масіў `a`, які будзе змяшчаць
	// 5 цэлых лічбаў. Тып элементаў і даўжыня масіву ёсцсь
	// чатай тыпу. Па змаўчанні масіў ствараецца з нулявымі
	// значэннямі элементаў.
	var a [5]int
	fmt.Println("emp:", a)

	// Значэнне элементу массіва задаецца наступным чынам
	// `array[index] = value`, каб узяць значэнне на індэксу
	// `array[index]`.
	a[4] = 100
	fmt.Println("set:", a)
	fmt.Println("get:", a[4])

	// Убудованная фунцыя `len` павяртая даўжыню масіву
	fmt.Println("len:", len(a))

	// Наступным чынам ствараецца масіў і адразу задаюцца
	// значэнні
	b := [5]int{1, 2, 3, 4, 5}
	fmt.Println("dcl:", b)

	// Ці можна пакінуць падлік колькасці элемтаў кампілятару
	b = [...]int{1, 2, 3, 4, 5}
	fmt.Println("dcl:", b)

	// Калі указаць індэск значэння, прапушчынныя значынні будуць
	// нулявымі
	b = [...]int{100, 3: 400, 500}
	fmt.Println("idx:", b)

	// Масіў мае адно вымярэнне, але можна скампанаваць два
	// масівы каб атрымаць двухмерную структуру даных
	var twoD [2][3]int
	for i := 0; i < 2; i++ {
		for j := 0; j < 3; j++ {
			twoD[i][j] = i + j
		}
	}
	fmt.Println("2d: ", twoD)

	// Можна стварыць і задаць значэнні двухмернаму масіву
	twoD = [2][3]int{
		{1, 2, 3},
		{1, 2, 3},
	}
	fmt.Println("2d: ", twoD)
}
