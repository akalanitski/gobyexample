// _Maps_ з'яўляюцца ўбудаваным у Go [асацыятыўны тып даных] (https://en.wikipedia.org/wiki/Associative_array)
// (часам называецца _хэшамі_ або _дзіктамі_ на іншых мовах).

package main

import (
	"fmt"
	"maps"
)

func main() {

	// Каб стварыць пустую карту, выкарыстоўвайце ўбудаваную функцыю `make`:
	// `make(map[key-type]val-type)`.
	m := make(map[string]int)

	// Устанавіць пары ключ/значэнне, выкарыстоўваючы тыповы сінтаксіс `name[key] = val`
	//.
	m["k1"] = 7
	m["k2"] = 13

	// Друк карты, напрыклад, з дапамогай `fmt.Println`, пакажа ўсе
	// яе пары ключ/значэнне.
	fmt.Println("map:", m)

	// Атрымаць значэнне для ключа з дапамогай `name[key]`.
	v1 := m["k1"]
	fmt.Println("v1:", v1)

	// Калі ключ не існуе, вяртаецца
	// [нулявое значэнне](https://go.dev/ref/spec#The_zero_value) тыпу
	// значэнне.
	v3 := m["k3"]
	fmt.Println("v3:", v3)

	// Убудаваная функцыя `len` вяртае колькасць пар ключ/значэнне
	// пры выкліку на мапе.
	fmt.Println("len:", len(m))

	// Убудаваная функцыя `delete` выдаляе пары ключ/значэнне з
	// карты.
	delete(m, "k2")
	fmt.Println("map:", m)

	// Каб выдаліць *усе* пары ключ/значэнне з карты, выкарыстоўвайце
	// убудаваную функцыю `clear`.
	clear(m)
	fmt.Println("map:", m)

	// Неабавязковае другое вяртанае значэнне пры атрыманні
	// значэння з карты паказвае, ці прысутнічаў ключ
	// на карце. Гэта можна выкарыстоўваць для вызначэння // адсутных ключоў і ключоў з нулявымі значэннямі
	// напрыклад, `0` або `""`. Тут нам не патрэбна было само значэнне
	// таму мы праігнаравалі яго з дапамогай ідэнтыфікатара _blank_
	// `_`.
	_, prs := m["k2"]
	fmt.Println("prs:", prs)

	// Вы таксама можаце аб'явіць і ініцыялізаваць новую мапу ў
	// тым жа радку з дапамогай гэтага сінтаксісу.
	n := map[string]int{"foo": 1, "bar": 2}
	fmt.Println("map:", n)

	// Пакет `maps` змяшчае шэраг карысных
	// функцый для працы з картамі.
	n2 := map[string]int{"foo": 1, "bar": 2}
	if maps.Equal(n, n2) {
		fmt.Println("n == n2")
	}
}
