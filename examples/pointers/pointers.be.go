// Go падтрымлівае [*указальнікі*](https://en.wikipedia.org/wiki/Pointer_%28computer_programming%29),
// што дазваляе перадаваць спасылкі на значэнні ўнутры праграмы.

package main

import "fmt"

// Пакажам, як працуюць указальнікі ў параўнанні са значэннямі
// на прыкладзе 2х функцый: `zeroval` і `zeroptr`.
// `zeroval` мае параметр `int`, таму аргументы будуць перадавацца
// яму па значэнні.
// `zeroval` атрымае копію `ival`, адрозную ад той, што знаходзіцца
// ў выклікальнай функцыі.
func zeroval(ival int) {
	ival = 0
}

// `zeroptr`, наадварот, мае параметр `*int`, што азначае, што ён прымае ўказальнік на `int`.
// Код `*iptr` у целе функцыі затым _разыменоўвае_ ўказальнік і павяртае
// значэнне з памяці па адрасе указальніка.
// Прысваенне значэння разыменаванаму ўказальніку змяняе
// значэнне у памяці.
func zeroptr(iptr *int) {
	*iptr = 0
}

func main() {
	i := 1
	fmt.Println("initial:", i)

	zeroval(i)
	fmt.Println("zeroval:", i)

	// Сінтаксіс `&i` дае адрас памяці `i`,
	// г.зн. указальнік на `i`.
	zeroptr(&i)
	fmt.Println("zeroptr:", i)

	// Указальнікі таксама можна вывесці.
	fmt.Println("pointer:", &i)
}
