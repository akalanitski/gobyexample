// Асноўны механізм кіравання станам у Go — гэта
// камунікація праз каналах. Мы бачылі гэта, напрыклад
// з [worker pools](worker-pools.html). Ёсць некалькі іншых
// варыянты кіравання станам. Тут мы будзем
// разгледзім выкарыстанне пакета `sync/atomic` для _atomic
// counters_, да якіх звяртаюцца некалькі горутын.

package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

func main() {

	// Мы будзем выкарыстоўваць атамарны цэлы лікавы тып для
	// прадстаўлення нашага (заўсёды дадатны) лічыльнік.
	var ops atomic.Uint64

	// WaitGroup дапаможа нам чакаць калі ўсе горуціны
	// скончыць сваю працу.
	var wg sync.WaitGroup

	// Мы запусцім 50 горуцін, кожная будзе павялічваць
	// лічыльнік роўна 1000 разоў.
	for i := 0; i < 50; i++ {
		wg.Add(1)

		go func() {
			for c := 0; c < 1000; c++ {

				// Каб атамарна павялічыць лічыльнік, мы выкарыстоўваем `Add`.
				ops.Add(1)
			}

			wg.Done()
		}()
	}

	// Чакаем, пакуль усе горуціны будуць завершаны.
	wg.Wait()

	// Тут у 'ops' не запісваюцца значэнне віводнай горуцінай,
	// але выкарыстоўваецца `Load` для бяспечнага "атамарнага" чытання
	// значэнне нават калі іншыя горуціны (атамарна) абнаўляюць яго.
	fmt.Println("ops:", ops.Load())
}
