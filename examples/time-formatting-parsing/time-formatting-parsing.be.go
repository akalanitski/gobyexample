// Go падтрымлівае фарматаванне і разбор часу за зразком
package main

import (
	"fmt"
	"time"
)

func main() {
	p := fmt.Println

	// Вось базавы прыклад фарматавання часу
	// згодна за зразком RFC3339
	t := time.Now()
	p(t.Format(time.RFC3339))

	// Пры разборы часу выкарыстоўваюцца тыя ж зразкі, што і ў `Format`.
	t1, e := time.Parse(
		time.RFC3339,
		"2012-11-01T22:08:41+00:00")
	p(t1)

	// `Format` і `Parse` выкарыстоўваюць зразкі. Звычайна
	// для гэтых зразкоў выкарыстоўваюцца канстанта з пакета `time`,
	// але можна задаць уласныя зразкі. Яны павінны выкарыстоўваць
	// эталонны час `Mon Jan 2 15:04:05 MST 2006`, каб паказаць
	// зразок, з дапамогай якога трэба фарматаваць/разбіраць час/тэкст.
	// Час у прыкладзе павінен быць дакладна такім, як паказаны: 2006 год,
	// 15 для гадзіны, панядзелак для дня тыдня і г.д.
	p(t.Format("3:04PM"))
	p(t.Format("Mon Jan _2 15:04:05 2006"))
	p(t.Format("2006-01-02T15:04:05.999999-07:00"))
	form := "3 04 PM"
	t2, e := time.Parse(form, "8 41 PM")
	p(t2)

	// Для чыста лікавых прадстаўленняў можна таксама
	// выкарыстоўваць стандартнае фарматаванне радкоў з вынятымі
	// кампанентамі значэння часу.
	fmt.Printf("%d-%02d-%02dT%02d:%02d:%02d-00:00\n",
		t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second())

	// `Parse` верне памылку пры няправільным пачатковым значэнні
	// і патлумачыць праблему
	ansic := "Mon Jan _2 15:04:05 2006"
	_, e = time.Parse(ansic, "8:41PM")
	p(e)
}
