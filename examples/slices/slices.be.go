// _Слайсы_ — важны тып дадзеных у Go, які дае
// больш магутны інтэрфейс для паслядоўнасцей, чым масівы.

package main

import (
	"fmt"
	"slices"
)

func main() {

	// У адрозненне ад масіваў, слайсы тыпізуюцца толькі элементамі,
	// якія яны ўтрымліваюць (а не іх колькасцю).
	// Неініцыялізаваны слайс роўны nil і мае даўжыню 0.
	var s []string
	fmt.Println("uninit:", s, s == nil, len(s) == 0)

	// Каб стварыць слайс з ненулявой даўжынёй, выкарыстоўвайце
	// убудаваную функцыю `make`. Тут мы ствараем слайс з
	// `string` даўжынёй `3` (пачаткова нулявое значэнне).
	// Па змаўчанні ёмістасць новага слайсу роўная яго
	// даўжыні; калі мы ведаем, што слайс будзе з часам,
	// можна перадаць ёмістасць відавочна як дадатковы параметр у `make`.
	s = make([]string, 3)
	fmt.Println("emp:", s, "len:", len(s), "cap:", cap(s))

	// Мы можам усталёўваць і атрымліваць значэнні гэтак жа, як і ў выпадку з масівамі.
	s[0] = "a"
	s[1] = "b"
	s[2] = "c"
	fmt.Println("set:", s)
	fmt.Println("get:", s[2])

	// `len` вяртае даўжыню слайсу
	fmt.Println("len:", len(s))

	// Акрамя гэтых простых аперацый, слайсы
	// падтрымліваюць некалькі іншых, якія робяць іх зручнейшымі за
	// масівы. Адной з іх з'яўляецца ўбудаваная функцыя `append`, якая
	// вяртае зрэз, які змяшчае адно або некалькі новых значэнняў.
	// Звярніце ўвагу, што нам трэба прыняць вяртанае значэнне ад
	// `append`, бо мы можам атрымаць новае значэнне слайсу.
	s = append(s, "d")
	s = append(s, "e", "f")
	fmt.Println("apd:", s)

	// Слайсы таксама можна `капіяваць`. Тут мы ствараем
	// пусты слайс `c` такой жа даўжыні, як `s`, і капіюем
	// у `c` з `s`.
	c := make([]string, len(s))
	copy(c, s)
	fmt.Println("cpy:", c)

	// Слайсы падтрымліваюць аператар "слайс" з сінтаксісам
	// `слайс[з:па]`. Напрыклад, гэта атрымлівае слайс
	// элементаў `s[2]`, `s[3]` і `s[4]`.
	l := s[2:5]
	fmt.Println("sl1:", l)

	// Гэта слайс да `s[5]` не ўключаюсы пяты элемент.
	l = s[:5]
	fmt.Println("sl2:", l)

	// І гэта адбываецца ад `s[2]` да канца, уключаючы другі элемент.
	l = s[2:]
	fmt.Println("sl3:", l)

	// Мы можам аб'явіць і задаць зменную для слайса ў адным радку.
	t := []string{"g", "h", "i"}
	fmt.Println("dcl:", t)

	// Пакет `slices` змяшчае шэраг карысных функцый.
	t2 := []string{"g", "h", "i"}
	if slices.Equal(t, t2) {
		fmt.Println("t == t2")
	}

	// Слайсы можна аб'ядноўваць у шматмерныя структуры дадзеных
	// Даўжыня ўнутраных зрэзаў можа
	// змяняцца, у адрозненне ад шматмерных масіваў.
	twoD := make([][]int, 3)
	for i := 0; i < 3; i++ {
		innerLen := i + 1
		twoD[i] = make([]int, innerLen)
		for j := 0; j < innerLen; j++ {
			twoD[i][j] = i + j
		}
	}
	fmt.Println("2d: ", twoD)
}
