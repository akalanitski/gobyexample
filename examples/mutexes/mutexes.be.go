// У папярэднім прыкладзе мы ўбачылі, як кіраваць простым
// станам лічыльніка з дапамогай [атамных аперацый](atomic-counters.html).
// Для больш складанага стану выкарыстоўваецца [_mutex_](https://en.wikipedia.org/wiki/Mutual_exclusion)
// для бяспечнага доступу да дадзеных праз некалькі горуцін.

package main

import (
	"fmt"
	"sync"
)

// Кантэйнер змяшчае карту лічыльнікаў; паколькі мы хочам
// абнаўляць яе адначасова з некалькіх горуцін, мы
// дадаем `Mutex` для сінхранізацыі доступу.
// Звярніце ўвагу, што м'ютэксы нельга капіяваць, таму, калі гэтая
// `структура` перадаецца, гэта павінна быць зроблена ссылкай.
type Container struct {
	mu       sync.Mutex
	counters map[string]int
}

func (c *Container) inc(name string) {
	// Блакуем м'ютэкс перад доступам да `counters`; разблакуем
	// яго ў канцы функцыі з дапамогай аператара [defer](defer.html)
	c.mu.Lock()
	defer c.mu.Unlock()
	c.counters[name]++
}

func main() {
	c := Container{
		// Звярніце ўвагу, што нулявое значэнне м'ютэкса можна выкарыстоўваць
		// як ёсць, таму ініцыялізацыя тут не патрабуецца.
		counters: map[string]int{"a": 0, "b": 0},
	}

	var wg sync.WaitGroup

	// Гэтая функцыя павялічвае іменаваны лічыльнік
	// у цыкле.
	doIncrement := func(name string, n int) {
		for i := 0; i < n; i++ {
			c.inc(name)
		}
		wg.Done()
	}

	// Адначасова запусціць некалькі горуцін; звярніце ўвагу,
	// што ўсе яны атрымліваюць доступ да аднаго і таго ж `Кантэйнера`,
	// і дзве з іх атрымліваюць доступ да аднаго і таго ж лічыльніка.
	wg.Add(3)
	go doIncrement("a", 10000)
	go doIncrement("a", 10000)
	go doIncrement("b", 10000)

	// Чакаем завяршэння горуцін
	wg.Wait()
	fmt.Println(c.counters)
}
