// [_параметры каманд_](https://be.wikipedia.org/wiki/Інтэрфейс_каманднага_радка)
// з'яўляюцца распаўсюджаным спосабам задання камунікацыі з
// праграмай. Напрыклад, у `wc -l` `-l` з'яўляецца
// параметрам каманды.

package main

// Go прапануе пакет `flag`, які падтрымлівае базавы
// разбор параметраў каманды. Гэты пакет выкарыстоўваецца ніжэй
// для рэалізацыі пграмы-прыкладу.
import (
	"flag"
	"fmt"
)

func main() {

	// Апісанне тэкставага, лічбавых і булеўскага параметраў.
	// Тут мы аб'яўляем тэкставы параметр `word` са стандартным значэннем `"foo"`
	// і невялікім апісаннем. Функцыя `flag.String` вяртае
	// ўказальнік тэкст (не зменную з тэкстам);
	// мы пабачым, як выкарыстоўваць гэты ўказальнік далей.
	wordPtr := flag.String("word", "foo", "a string")

	// Тут аб'яўляюцца параметр `numb` і `fork`, тым жа парадкам
	// што і параметр `word`.
	numbPtr := flag.Int("numb", 42, "an int")
	forkPtr := flag.Bool("fork", false, "a bool")

	// Таксама можна аб'явіць параметр, які выкарыстоўвае
	// існуючую зменную, аб'яўленую ў іншым месцы праграмы.
	// Звярніце ўвагу, што нам трэба перадаць указальнік
	var svar string
	flag.StringVar(&svar, "svar", "bar", "a string var")

	// Калі ўсе параметры апісаны, функцыя `flag.Parse()`
	// разбірае аргументы каманды
	flag.Parse()

	// Тут мы проста вывядзем разабраныя і не разобранныя параметры.
	// Звярніце ўвагу, што нам трэба разыменаваць указальнікі,
	// напрыклад, з дапамогай `*wordPtr` каб атрымаць рэальныя
	// значэнні параметраў.
	fmt.Println("word:", *wordPtr)
	fmt.Println("numb:", *numbPtr)
	fmt.Println("fork:", *forkPtr)
	fmt.Println("svar:", svar)
	fmt.Println("tail:", flag.Args())
}
