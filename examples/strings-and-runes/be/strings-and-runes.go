// Тэкставы тым `string` у Go — гэта слайс байтаў, даступны толькі для чытання.
// Мова і стандартная бібліятэка апрацоўваюць тэкставыя зменныя асаблівым чынам — як
// кантэйнеры тэксту, закадзіраванага ў [UTF-8](https://en.wikipedia.org/wiki/UTF-8).
// У іншых мовах радкі складаюцца з «сімвалаў».
// У Go паняцце сімвала называецца `рунай`. Руна -- гэта
// цэлы лік, які прадстаўляе код Unicode.
// [Гэты пост у блогу Go](https://go.dev/blog/strings) — добрае
// ўвядзенне ў тэму.

package main

import (
	"fmt"
	"unicode/utf8"
)

func main() {

	// `s` — гэта тэкставая зменная, якой прысвоена паслядоўнасць літар
	// які прадстаўляе слова "hello" на тайскай мове
	// Тэкставыя значэнні ў Go — тэкст у кадыроўцы UTF-8.
	const s = "สวัสดี"

	// Паколькі тэкст эквівалентны `[]byte`, гэта
	// верне колькасць байтаў тэксту.
	fmt.Println("Len:", len(s))

	// Выкарыстанне тэкставага значэння па індэксу працуе з байтамі.
	// Ніжэй цыкл генеруе шаснаццатковыя значэнні ўсіх
	// байтаў, якія складаюць кодавыя значэнні ў `s`.
	for i := 0; i < len(s); i++ {
		fmt.Printf("%x ", s[i])
	}
	fmt.Println()

	// Каб падлічыць колькасць _рун_ у радку, можна выкарыстоўваць
	// пакет `utf8`. Звярніце ўвагу, што час выканання
	// `RuneCountInString` залежыць ад памеру радка,
	// таму што ён павінен дэкадаваць кожную руну UTF-8 паслядоўна.
	// Некаторыя тайскія сімвалы прадстаўлены кодавымі кропкамі UTF-8,
	// якія могуць ахопліваць некалькі байтаў, таму вынік гэтага падліку
	// можа быць нечаканым.
	fmt.Println("Rune count:", utf8.RuneCountInString(s))

	// Цыкл `range` апрацоўвае тэкст дэкадуючы кожную руну разам з яе месцам.
	for idx, runeValue := range s {
		fmt.Printf("%#U starts at %d\n", runeValue, idx)
	}

	// Мы можам дасягнуць той жа ітэрацыі,
	// выкарыстоўваючы функцыю `utf8.DecodeRuneInString`.
	fmt.Println("\nUsing DecodeRuneInString")
	for i, w := 0, 0; i < len(s); i += w {
		runeValue, width := utf8.DecodeRuneInString(s[i:])
		fmt.Printf("%#U starts at %d\n", runeValue, i)
		w = width

		// Тут перадаецца значэнне тыпу `rune` у функцыю.
		examineRune(runeValue)
	}
}

func examineRune(r rune) {

	// Значэнні, узятыя ў адзінарныя двукоссі, з'яўляюцца _рунічнымі значэннямі.
	if r == 't' {
		fmt.Println("found tee")
	} else if r == 'ส' {
		fmt.Println("found so sua")
	}
}
