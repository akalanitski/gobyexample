// Чытанне і запіс файлаў — простыя задачы, неабходныя для
// многіх праграм на Go. Спачатку мы разгледзім некалькі прыкладаў
// чытання файлаў.

package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
)

// Чытанне файлаў патрабуе праверкі большасці выклікаў на наяўнасць памылак.
// Гэты памочнік спрасціць нашы праверкі памылак ніжэй.
func check(e error) {
	if e != nil {
		panic(e)
	}
}

func main() {

	// Магчыма, самая простая задача чытання файла — гэта
	// запіс усяго змесціва файла ў памяць.
	dat, err := os.ReadFile("/tmp/dat")
	check(err)
	fmt.Print(string(dat))

	// Часта вам спатрэбіцца больш кантролю над тым, як і якія
	// часткі файла чытаюцца. Для гэтых задач пачніце
	// з `Адкрыцця файла, каб атрымаць значэнне `os.File`.
	f, err := os.Open("/tmp/dat")
	check(err)

	// Чытаем некалькі байтаў з пачатку файла.
	// Дазволім прачытаць да 5 байтаў, але таксама адзначым, колькі
	// было прачытана насамрэч.
	b1 := make([]byte, 5)
	n1, err := f.Read(b1)
	check(err)
	fmt.Printf("%d bytes: %s\n", n1, string(b1[:n1]))

	// Вы таксама можаце перайсці да дакладнага месца ў файле
	// і чытаць адтуль.
	o2, err := f.Seek(6, io.SeekStart)
	check(err)
	b2 := make([]byte, 2)
	n2, err := f.Read(b2)
	check(err)
	fmt.Printf("%d bytes @ %d: ", n2, o2)
	fmt.Printf("%v\n", string(b2[:n2]))

	// Іншы прыклад перахода адносна пазіцыі курсора
	_, err = f.Seek(2, io.SeekCurrent)
	check(err)

	// і адносна канца файла.
	_, err = f.Seek(-4, io.SeekEnd)
	check(err)

	// Пакет `io` прадастаўляе некаторыя функцыі, якія могуць
	// быць карыснымі для чытання файлаў. Напрыклад, функцыі чытання
	// падобныя да вышэйзгаданых, могуць быць больш надзейна
	// рэалізаваны з дапамогай `ReadAtLeast`.
	o3, err := f.Seek(6, io.SeekStart)
	check(err)
	b3 := make([]byte, 2)
	n3, err := io.ReadAtLeast(f, b3, 2)
	check(err)
	fmt.Printf("%d bytes @ %d: %s\n", n3, o3, string(b3))

	// Убудаванай "перамоткі" назад няма, але `Seek(0, io.SeekStart)` выконвае гэта.
	_, err = f.Seek(0, io.SeekStart)
	check(err)

	// Пакет `bufio` рэалізуе буферызаваны
	// чытача, які можа быць карысным як праз сваю эфектыўнасць,
	// пры вялікай колькасці невялікіх чытанняў, так і праз дадатковыя
	// метады, якія ён прапануе.
	r4 := bufio.NewReader(f)
	b4, err := r4.Peek(5)
	check(err)
	fmt.Printf("5 bytes: %s\n", string(b4))

	// Закрыць файл пасля завяршэння (звычайна гэта будзе
	// запланавана адразу пасля адкрыцця з дапамогай `defer`.
	f.Close()
}
