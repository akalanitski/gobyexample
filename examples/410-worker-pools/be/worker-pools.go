// У гэтым прыкладзе мы разгледзім, як рэалізаваць
// _пул воркераў_ з дапамогай горуцін і каналаў.

package main

import (
	"fmt"
	"time"
)

// Тут воркер, некалькі экзэмпляраў якога мы запусцім адначасова
// Гэтыя воркеры будуць атрымліваць інфмацыю па канале `jobs`
// і адпраўляць адпаведныя вынікі па каналу `results`.
// Вокер будзе "засынаць" на секунду кожны раз, каб
// імітаваць дарагую задачу. (Нагадвае працу ў офісе)
func worker(id int, jobs <-chan int, results chan<- int) {
	for j := range jobs {
		fmt.Println("worker", id, "started  job", j)
		time.Sleep(time.Second)
		fmt.Println("worker", id, "finished job", j)
		results <- j * 2
	}
}

func main() {

	// Каб выкарыстоўваць наш пул работнікаў, нам трэба адправіць
	// ім працу і сабраць яе вынікі. Мы ствараем 2
	// каналы для гэтага.
	const numJobs = 5
	jobs := make(chan int, numJobs)
	results := make(chan int, numJobs)

	// Тут запускаем 3 воркеры, першапачаткова бадзяюцца без справы
	// (заблакаваны) пакуль няма заданняў.
	for w := 1; w <= 3; w++ {
		go worker(w, jobs, results)
	}

	// Тут мы адпраўляем 5 `задач`, а затым `закрываем` гэты
	// канал, каб паказаць, што гэта ўся праца, якая ў нас ёсць.
	for j := 1; j <= numJobs; j++ {
		jobs <- j
	}
	close(jobs)

	// Нарэшце мы збіраем усе вынікі працы.
	// Гэта таксама гарантуе, што рабочыя горуціны
	// скончылі. Альтэрнатыўны спосаб чакання некалькіх
	// горуцін - выкарыстоўваць [WaitGroup](waitgroups).
	for a := 1; a <= numJobs; a++ {
		<-results
	}
}
