// _range_ перабірае элементы ў розных
// убудаваных структурах дадзеных. Давайце паглядзім, як
// выкарыстоўваць `range` з некаторымі структурамі дадзеных,
// якія мы ўжо ведаем.

package main

import "fmt"

func main() {

	// Тут `range` выкарыстоўваецца для складання лікаў у слайсе.
	// Масівы працуюць тым жа чынам.
	nums := []int{2, 3, 4}
	sum := 0
	for _, num := range nums {
		sum += num
	}
	fmt.Println("sum:", sum)

	// `range` для масіваў і слайсаў забяспечвае як
	// індэкс, так і значэнне кожнага элементу. У пяпярэднім прыкладзе індэкс
	// быў не патрэбны, таму мы праігнаравалі яго з дапамогай
	// пустога ідэнтыфікатара `_`.
	// Часам індэкс бывае патрэбны
	for i, num := range nums {
		if num == 3 {
			fmt.Println("index:", i)
		}
	}

	// Застасаванне `range` да мапы перабірае пары ключ/значэнне.
	kvs := map[string]string{"a": "apple", "b": "banana"}
	for k, v := range kvs {
		fmt.Printf("%s -> %s\n", k, v)
	}

	// `range` можа перабіраць толькі ключы мапы.
	for k := range kvs {
		fmt.Println("key:", k)
	}

	// `range` для радкоў перабірае Unicode-коды.
	// Першае значэнне — гэта пачатковы індэкс байта `rune`, а другое — сама `rune`.
	// Глядзіце [Strings and Runes](strings-and-runes) для атрымання дадатковай інфармацыі.
	for i, c := range "go" {
		fmt.Println(i, c)
	}
}
