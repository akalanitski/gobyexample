// Go прапануе выдатную падтрымку фарматавання радкоў у
// традыцыі `printf`. Вось некалькі прыкладаў
// распаўсюджаных задач фарматавання радкоў.

package main

import (
	"fmt"
	"os"
)

type point struct {
	x, y int
}

func main() {

	// Go прапануе некалькі вывадных "дзеясловаў", прызначаных для
	// фарматавання агульных значэнняў Go. Напрыклад, гэта выводзіць
	// экзэмпляр нашай структуры `point`.
	p := point{1, 2}
	fmt.Printf("struct1: %v\n", p)

	// Калі значэнне з'яўляецца структурай, варыянт `%+v` будзе
	// уключаць назвы палёў структуры.
	fmt.Printf("struct2: %+v\n", p)

	// Варыянт `%#v` друкуе прадстаўленне сінтаксісу Go
	// значэння, г.зн. фрагмент зыходнага кода, які
	// вярнуў бы гэта значэнне.
	fmt.Printf("struct3: %#v\n", p)

	// Каб вывесці тып значэння, выкарыстоўвайце `%T`.
	fmt.Printf("type: %T\n", p)

	// Фарматаванне булевых значэнняў вельмі простае.
	fmt.Printf("bool: %t\n", true)

	// Існуе мноства варыянтаў фарматавання цэлых лікаў.
	// Выкарыстоўвайце `%d` для стандартнага фарматавання з асновай 10.
	fmt.Printf("int: %d\n", 123)

	// Гэта друкуе двайковае прадстаўленне.
	fmt.Printf("bin: %b\n", 14)

	// Гэта друкуе сімвал, які адпавядае
	// зададзенаму цэламу ліку.
	fmt.Printf("char: %c\n", 33)

	// `%x` забяспечвае шаснаццатковае кадаванне.
	fmt.Printf("hex: %x\n", 456)

	// Існуе таксама некалькі варыянтаў фарматавання для
	// лікаў з плаваючай кропкай. Для базавага дзесятковага фарматавання выкарыстоўвайце `%f`.
	fmt.Printf("float1: %f\n", 78.9)

	// `%e` і `%E` фарматуюць лік з плаваючай кропкай у (трохі
	// розных версіях) навуковай натацыі.
	fmt.Printf("float2: %e\n", 123400000.0)
	fmt.Printf("float3: %E\n", 123400000.0)

	// Для звычайнага вываду радкоў выкарыстоўвайце `%s`.
	fmt.Printf("str1: %s\n", "\"string\"")

	// Каб заключыць радкі ў падвойныя двукоссі, як у зыходным коде Go, выкарыстоўвайце `%q`.
	fmt.Printf("str2: %q\n", "\"string\"")

	// Як і ў выпадку з цэлымі лікамі, якія разглядаліся раней, `%x` адлюстроўвае
	// радок у шаснаццатковай сістэме злічэння з двума выходнымі сімваламі
	// на байт уваходных дадзеных.
	fmt.Printf("str3: %x\n", "hex this")

	// Каб вывесці прадстаўленне ўказальніка, выкарыстоўвайце `%p`.
	fmt.Printf("pointer: %p\n", &p)

	// Пры фарматаванні лікаў часта патрабуецца
	// кантраляваць шырыню і дакладнасць атрыманага
	// малюнка. Каб задаць шырыню цэлага ліку, выкарыстоўвайце 4
	// лік пасля `%` у дзеяслове. Па змаўчанні
	// вынік будзе выраўнаваны па правым краі і дапоўнены
	// прабеламі.
	fmt.Printf("width1: |%6d|%6d|\n", 12, 345)

	// Вы таксама можаце ўказаць шырыню друкаваных лікаў з плаваючай кропкай,
	// хоць звычайна вам таксама трэба абмежаваць
	// дзесятковую дакладнасць адначасова з дапамогай
	// сінтаксісу width.precision.
	fmt.Printf("width2: |%6.2f|%6.2f|\n", 1.2, 3.45)

	// Для выраўноўвання па левым краі выкарыстоўвайце сцяг `-`.
	fmt.Printf("width3: |%-6.2f|%-6.2f|\n", 1.2, 3.45)

	// Вы таксама можаце кантраляваць шырыню пры фарматаванні
	// радкоў, асабліва каб пераканацца, што яны выраўнаваны ў
	// таблічным вывадзе. Для базавага выраўноўвання шырыні па правым краі.
	fmt.Printf("width4: |%6s|%6s|\n", "foo", "b")

	// Для выраўноўвання па левым краі выкарыстоўвайце сцяг `-`, як і для лічбаў.
	fmt.Printf("width5: |%-6s|%-6s|\n", "foo", "b")

	// Да гэтага часу мы бачылі `Printf`, які друкуе
	// адфарматаваны радок у `os.Stdout`. `Sprintf` фарматуе
	// і вяртае радок, нідзе яго не друкуючы.
	s := fmt.Sprintf("sprintf: a %s", "string")
	fmt.Println(s)

	// Вы можаце фарматаваць+друкаваць у `io.Writers`, акрамя
	// `os.Stdout`, выкарыстоўваючы `Fprintf`.
	fmt.Fprintf(os.Stderr, "io: an %s\n", "error")
}
