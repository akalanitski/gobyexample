// Go прапануе ўбудаваную падтрымку для стварэння дынамічнага кантэнту або
// паказу песаналізванавага вываду з дапамогай пакета `text/template`.
// Суседні `html/template` прапануе такі ж API, але дадае бяспечную
// генерацыю HTML

package main

import (
	"os"
	"text/template"
)

func main() {

	// Тут ствараецца новы шаблон і які апісваецца тэкстам у функцыю `Parse`
	// Шаблоны — гэта спалучэнне тэксту і «дзеянняў», заключаных у
	// `{{...}}`, якія выкарыстоўваюцца для устаўкі кантэнту.
	t1 := template.New("t1")
	t1, err := t1.Parse("Value is {{.}}\n")
	if err != nil {
		panic(err)
	}

	// Для панікі ў выпадку памылкі можна выкарыстоўваць функцыю `template.Must`
	// Зручна для шаблонаў, створаных у глабальнай вобласці прымянення.
	t1 = template.Must(t1.Parse("Value: {{.}}\n"))

	// Выконваючы шаблон, мы генеруем тэкст з падстаўляючы дынамічныя элементы
	// Дзеянне `{{.}}` замяняецца значэннем, перададзеным у якасці параметра для `Execute`.
	t1.Execute(os.Stdout, "some text")
	t1.Execute(os.Stdout, 5)
	t1.Execute(os.Stdout, []string{
		"Go",
		"Rust",
		"C++",
		"C#",
	})

	// функцыя, якую мы будзем выкарыстоўваць ніжэй для спрашчэння
	Create := func(name, t string) *template.Template {
		return template.Must(template.New(name).Parse(t))
	}

	// Калі дадзеныя з'яўляюцца структурай, яе паля выкарыстоўваюцца
	// наступным чынам `{{.FieldName}}`. Палі павінны быць відзімы
	// (павінны пачынацца з вялікай літары),
	// каб быць даступнымі падчас выканання шаблону.
	t2 := Create("t2", "Name: {{.Name}}, title: {{.title}}\n")

	t2.Execute(os.Stdout, struct {
		Name, title string
	}{"Jane Doe", "Mr."})

	// Тым жа чынам можна выкарыстоўваць значэнні мап праз кропку нібы гэта
	// палі структуры. Пры гэтым палі мап не маюць выпог відзімасці, таму можна
	// выкарыстоўваць як вялікія так маленькія літары
	t2.Execute(os.Stdout, map[string]string{
		"Name":  "Mickey Mouse",
		"title": "Hero",
	})

	// `if/else` - дзея разгалівоўвае логіку ў сярэдзіне шаблона.
	// Нулявыя значэнні лічацца ілжывымі (напрыклад, 0, пусты тэкст, nil і г.д.
	// Гэты прыклад дэманструе яшчэ адну
	// асаблівасць шаблонаў: выкарыстанне `-` у дзеяннях для выдалення прабелаў.
	t3 := Create("t3",
		"{{if . -}} yes {{else -}} no {{end}}\n")
	t3.Execute(os.Stdout, "not empty")
	t3.Execute(os.Stdout, "")

	// `range`-дзея дазваляюць перабіраць слайсы, масівы, мапы або каналы.
	// Доступ да элементу у ссярэдзіне `range`-дзеі ажыцяўляецца праз
	// кропку `{{.}}`
	t4 := Create("t4",
		"Range: {{range .}}{{.}} {{end}}\n")
	t4.Execute(os.Stdout,
		[]string{
			"Go",
			"Rust",
			"C++",
			"C#",
		})
}
