// Нам часта хочацца выканаць код Go у нейкі момант у
// будучыні або паўторна праз нейкі інтэрвал. Убудаваныя функцыі Go
// _timer_ і _ticker_ спрашчаюць абедзве гэтыя задачы.
// Спачатку мы разгледзім таймеры, а потым
// [Тыкеры](tickers).

package main

import (
	"fmt"
	"time"
)

func main() {

	// Таймеры прадстаўляюць адзіночную падзею ў будучыні. Вы
	// задаеце колькі часу вы хочаце чакаць, і атрымліваеце канал,
	// які атрымае паведамленне праз гэты час.
	// Тут таймер чакае 2 секунды.
	timer1 := time.NewTimer(2 * time.Second)

	// каманда `<-timer1.C` чакае значэнне з канале таймера `C
	<-timer1.C
	fmt.Println("Timer 1 fired")

	// Можна выкарыстоўваць `time.Sleep`, калі трэба проста пчакаць.
	// Адна з прычын, чаму таймер можа быць зручным, гэта
	// магчымасць спыніць да спрацоўвання.
	timer2 := time.NewTimer(time.Second)
	go func() {
		<-timer2.C
		fmt.Println("Timer 2 fired")
	}()
	stop2 := timer2.Stop()
	if stop2 {
		fmt.Println("Timer 2 stopped")
	}

	// Дайце `timer2` дастаткова часу для спрацоўвання,
	// каб паказаць, што ён сапраўды спынены.
	time.Sleep(2 * time.Second)
}
