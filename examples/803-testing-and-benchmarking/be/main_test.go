// Юніт-тэставанне — важная частка напісання праграм на Go.
// Пакет `testing` надае інструменты, неабходныя для напісання юніт-тэстаў
// а каманда `go test` запускае тэсты.

// Для дэманстрацыі гэты код знаходзіцца ў пакеце
// `main`, але гэта можа быць любы іншы пакет. Код тэставання
// звычайна знаходзіцца ў тым жа пакеце, што і код, які ён тэстуе.
package be

import (
	"fmt"
	"testing"
)

// Мы будзем тэставаць гэтую простую рэалізацыю
// цэлалікавага мінімуму. Звычайна код, які мы тэстуем,
// знаходзіцца ў зыходным файле з назвай прыкладна накшталт
// `intutils.go`, а тэставы файл для яго тады будзе
// называцца `intutils_test.go`.
func IntMin(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// Тэст ствараецца шляхам напісання функцыі з імем,
// якое пачынаецца з `Test`.
func TestIntMinBasic(t *testing.T) {
	ans := IntMin(2, -2)
	if ans != -2 {
		// `t.Error*` паведаміць пра няўдачы тэсту, але працягне
		// выкананне тэсту. `t.Fatal*` паведаміць пра няўдачы тэсту
		// і неадкладна спыніць тэст.
		t.Errorf("IntMin(2, -2) = %d; want -2", ans)
	}
}

// Напісанне тэстаў можа быць паўтаральным, таму ідыяматычна
// выкарыстоўваць *стыль, арыентаваны на табліцы*, дзе ўваходныя дадзеныя тэсту і
// чаканыя вынікі пералічаны ў табліцы, а адзін цыкл
// праходзіць па іх і выконвае логіку тэсту.
func TestIntMinTableDriven(t *testing.T) {
	var tests = []struct {
		a, b int
		want int
	}{
		{0, 1, 0},
		{1, 0, 0},
		{2, -2, -2},
		{0, -1, -1},
		{-1, 0, -1},
	}

	for _, tt := range tests {
		// `t.Run` дазваляе запускаць "падтэсты", па адным для кожнага
		// запісу ў табліцы. Яны паказваюцца асобна
		// пры выкананні `go test -v`.
		testname := fmt.Sprintf("%d,%d", tt.a, tt.b)
		t.Run(testname, func(t *testing.T) {
			ans := IntMin(tt.a, tt.b)
			if ans != tt.want {
				t.Errorf("got %d, want %d", ans, tt.want)
			}
		})
	}
}

// Тэсты бенчмарка звычайна захоўваюцца ў файлах `_test.go` і маюць
// назвы, якія пачынаюцца з `Benchmark`.
// Любы код, неабходны для запуску бенчмарка, але які не павінен
// вымярацца, змяшчаецца перад гэтым цыклам.
func BenchmarkIntMin(b *testing.B) {
	for b.Loop() {
		// Праграма для выканання тэстаў аўтаматычна выканае гэты цыкл
		// шмат разоў, каб вызначыць разумную ацэнку
		// часу выканання адной ітэрацыі.
		IntMin(1, 2)
	}
}
